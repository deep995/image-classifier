from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.optimizers import SGD,RMSprop,adam
from keras.utils import np_utils

import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import os
import theano
from PIL import Image
from numpy import *
# SKLEARN
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split



## Preprocessing the Training Data

# input image dimensions
img_rows, img_cols = 800, 800

# number of channels
img_channels = 1

#%%
#  data

path1 = '/content/drive/My Drive/assignment/train'   #path of folder of images     

listing = os.listdir(path1) 
num_samples=size(listing)
print(num_samples)

imlist = os.listdir(path1)
imlist=sorted(imlist)



# create matrix to store all images
immatrix = array([np.asarray(Image.open(path1 + '/' + im2).convert('L'))
              for im2 in imlist])
              
              
              
 # labelling the training data
label=np.zeros(num_samples)
label[0:103]=0
label[103:209]=1
label[209:321]=2
label[321:]=3


data,Label = shuffle(immatrix,label, random_state=2)
train_data = [data,Label]



print (train_data[0].shape)
print (train_data[1].shape)   




##Preprocessing the Test Data


# input image dimensions
img_rows, img_cols = 800, 800

# number of channels
img_channels = 1

#%%
#  data

path2 = '/content/drive/My Drive/assignment/test'   #path of folder of images     

listing1 = os.listdir(path2)
listing1=sorted(listing1)
num_samples1=size(listing1)
print(num_samples1)

imlist1 = os.listdir(path2)

immatrix1 = array([np.asarray(Image.open(path2 + '/' + im2).convert('L'))
              for im2 in imlist1])



l1=[0,0,2,2,2,2,1,1,3,3,0,0,0,2,2,2,2,2,2,2,1,1,1,1,1,1,1,3,3,3]


label1=np.asarray(l1)


data1,Label1 = shuffle(immatrix1,label1, random_state=2)
test_data = [data1,Label1]



print (test_data[0].shape)
print (test_data[1].shape)   




#batch_size to train
batch_size = 32
# number of output classes
nb_classes = 4
# number of epochs to train
epochs = 20


# number of convolutional filters to use
nb_filters = 32
# size of pooling area for max pooling
nb_pool = 2
# convolution kernel size
nb_conv = 3

#%%
(X_train, Y_train) = (train_data[0],train_data[1])


(X_test, Y_test) = (test_data[0],test_data[1])


X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)
X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')



print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')
print(Y_train.shape,'train labels')
print(Y_test.shape,'test labels')

# convert class vectors to binary class matrices
Y_train = np_utils.to_categorical(Y_train, num_classes=nb_classes)
Y_test = np_utils.to_categorical(Y_test, num_classes=nb_classes)

input_shape=(img_rows, img_cols, 1)

print(Y_train.shape)
print(Y_test.shape)
#%%




model = Sequential()

model.add(Convolution2D(nb_filters, nb_conv, nb_conv,
                        border_mode='valid',
                        input_shape=input_shape))
convout1 = Activation('relu')
model.add(convout1)
model.add(Convolution2D(nb_filters, nb_conv, nb_conv))
convout2 = Activation('relu')
model.add(convout2)
model.add(MaxPooling2D(pool_size=(nb_pool, nb_pool)))
model.add(Dropout(0.5))

model.add(Flatten())
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes))
model.add(Activation('softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adadelta')

#%%

hist = model.fit(X_train, Y_train, batch_size=batch_size, epochs=epochs,
              verbose=1, validation_data=(X_test, Y_test))
            
            
hist = model.fit(X_train, Y_train, batch_size=batch_size, epochs=epochs,
              verbose=1, validation_split=0.2)




# visualizing losses and accuracy

train_loss=hist.history['loss']
val_loss=hist.history['val_loss']
train_acc=hist.history['acc']
val_acc=hist.history['val_acc']
xc=range(epochs)

plt.figure(1,figsize=(7,5))
plt.plot(xc,train_loss)
plt.plot(xc,val_loss)
plt.xlabel('num of Epochs')
plt.ylabel('loss')
plt.title('train_loss vs val_loss')
plt.grid(True)
plt.legend(['train','val'])

plt.style.use(['classic'])

plt.figure(2,figsize=(7,5))
plt.plot(xc,train_acc)
plt.plot(xc,val_acc)
plt.xlabel('num of Epochs')
plt.ylabel('accuracy')
plt.title('train_acc vs val_acc')
plt.grid(True)
plt.legend(['train','val'],loc=4)

plt.style.use(['classic'])




#%%       

score = model.evaluate(X_test, Y_test, show_accuracy=True, verbose=0)
print('Test score:', score[0])
print('Test accuracy:', score[1])
print(model.predict_classes(X_test[1:5]))
print(Y_test[1:5])

